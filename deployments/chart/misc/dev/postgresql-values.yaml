postgresql:
  enabled: true
  fullnameOverride: ""
  kubeVersion: ""
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 15.4.0-debian-11-r45
    digest: "sha256:5dba7e6a514d5d628d484d23212dcaf3d7c5816af1d4970649547a03a99f78dc"
    pullPolicy: Always
  auth:
    enablePostgresUser: true
    postgresPassword: lele3482!!!
    username: username
    password: lele3482!!!
    database: startupers
    replicationUsername: repl_user
    replicationPassword: lele3482!!!
    existingSecret: ""
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
      replicationPasswordKey: replication-password
  architecture: replication

  metrics:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.14.0-debian-11-r2
      digest: "sha256:cfecb2a33789173be41e20d515dd81d8e7f55583a8c985753f43702bb67314f6"
      pullPolicy: Always
    resources:
      limits: {}
      requests: {}
    serviceMonitor:
      enabled: false
      namespace: ""
      interval: ""
      scrapeTimeout: ""
      labels:
        release: prometheus
      relabelings: []
      metricRelabelings: []
      honorLabels: false
      jobLabel: ""
    customMetrics:
      pg_database:
        metrics:
        - name:
            description: Name of the database
            usage: LABEL
        - size_bytes:
            description: Size of the database in bytes
            usage: GAUGE
        query: "SELECT pg_database.datname, pg_database_size(pg_database.datname) as bytes FROM pg_database;"

    podSecurityContext:
      enabled: true
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 0
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL

  replication:
    applicationName: startupers

  volumePermissions:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: 11-debian-11-r77
      digest: "sha256:4131b59e175d99571661ddcda248c949d021a54c44994794c823b1f2091d81d6"
      pullPolicy: Always

  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations: {}

  rbac:
    create: true
    rules:
      - apiGroups:
          - ""
        resources:
          - configmaps
        verbs:
          - get
          - watch
        resourceNames:
          - startupers-postgresql-primary-init-scripts
          - startupers-postgresql-primary-metrics
          - startupers-postgresql-read-metrics
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get
          - watch
        resourceNames:
          - startupers-postgresql
      - apiGroups:
          - ""
        resources:
          - pods
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - "apps"
        resources:
          - statefulsets
        verbs:
          - get
      - apiGroups:
        - ""
        resources:
        - persistentvolumeclaims
        verbs:
        - get
        - list
        - watch
        - create

  networkPolicy:
    enabled: false
    metrics:
      enabled: true

    ingressRules:
      primaryAccessOnlyFrom:
        enabled: true
        namespaceSelector: {}
        podSelector: {}
        customRules: []

      readReplicasAccessOnlyFrom:
        enabled: true
        namespaceSelector: {}
        podSelector: {}
        customRules: []

  postgresqlSharedPreloadLibraries: "pgaudit,uuid-ossp,pg_stat_statements,pgcrypto"
  primary:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    podAnnotations:
      backup.velero.io/backup-volumes: backup
      pre.hook.backup.velero.io/command: '["/bin/bash", "-c", "PGPASSWORD=$POSTGRES_PASSWORD pg_dump -U $POSTGRES_USER -d $POSTGRES_DATABASE -h 127.0.0.1 > /scratch/backup.sql && mkdir -p /bitnami/postgresql/backups && mv /scratch/backup.sql /bitnami/postgresql/backups"]'
      pre.hook.backup.velero.io/timeout: 15m
      post.hook.restore.velero.io/command: '["/bin/bash", "-c", "[ -f \"/scratch/backup.sql\" ] && PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USER -h 127.0.0.1 -d $POSTGRES_DATABASE -f /scratch/backup.sql && rm -f /scratch/backup.sql;"]'
    extraVolumes:
      - name: backup
        emptyDir:
          sizeLimit: 1Gi
    extraVolumeMounts:
      - name: backup
        mountPath: /scratch
    persistence:
      enabled: true
      existingClaim: ""
      size: 4Gi
      storageClass: standard
      accessModes:
        - ReadWriteOnce
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 0
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL

  readReplicas:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    replicaCount: 1
    persistence:
      enabled: true
      existingClaim: ""
      size: 4Gi
      storageClass: standard
      accessModes:
        - ReadWriteOnce
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 0
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
